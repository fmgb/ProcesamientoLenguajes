*********************************************************
Autocorrector plp3 
 Generando ficheros auxiliares... 
*********************************************************
 Compilando...
*********************************************************

*********************************************************
 Ejecutando y comprobando salida a la vez...
*********************************************************
Prueba: errlex1
OK
--------------------------
Prueba: errlex2
OK
--------------------------
Prueba: errlex3
OK
--------------------------
Prueba: errlex4
OK
--------------------------
Prueba: errsem11
OK
--------------------------
Prueba: errsem12
OK
--------------------------
Prueba: errsem1
OK
--------------------------
Prueba: errsem2
OK
--------------------------
Prueba: errsem3
OK
--------------------------
Prueba: errsem4
OK
--------------------------
Prueba: errsem5
OK
--------------------------
Prueba: errsem7
OK
--------------------------
Prueba: errsem8
OK
--------------------------
Prueba: errsem9
OK
--------------------------
Prueba: errsint1
OK
--------------------------
Prueba: errsint2
OK
--------------------------
Prueba: errsint3
OK
--------------------------
Prueba: errsint4
OK
--------------------------
Prueba: nu-correcto1
--- Fallo en la traducción ----------
0a1,33
> // program programa
> 
> 
> int main_vara,main_varb;
> double main_realc,main_integerio;
> int main_donde,main_ifa;
> double f_f_f_elsea;
> double f_f_f() {
> f_f_f_elsea =r itor(1 +i 2 +i 3 +i 4 +i 5) +r itor(6) /r itor(7);
> }
> int f_f_g_endifa;
> int f_f_g() {
> f_f_g_endifa =i 1 +i 2 +i 3 +i 4 +i 5 +i 6 /i 7;
> }
> double f_f() {
> printf("%g\n",1.0 *r itor(2) +r itor(3) +r itor(4) +r itor(5));
> }
> int f_i,f_j,f_k;
> int f() {
> f_i =i f_k +i f_j;
> }
> int main() {
> main_vara =i 2 *i main_varb;
> main_realc =r 2.3;
> if (main_realc <r itor(main_vara))
> while ( itor(main_vara) >=r main_realc)
> {
> printf("%d\n",main_vara);
> main_vara =i main_vara -i 1;
> }
> 
> }
> 
--------------------------
Prueba: nu-errlex1
OK
--------------------------
Prueba: nu-errlex2
OK
--------------------------
Prueba: nu-errsint1
OK
--------------------------
Prueba: nu-errsint2
OK
--------------------------
Prueba: nu-errsint3
OK
--------------------------
Prueba: nu-errsint4
OK
--------------------------
Prueba: nu-errsint5
OK
--------------------------
Prueba: nu-errsint6
OK
--------------------------
Prueba: nu-errsint7
OK
--------------------------
Prueba: primos
--- Fallo en la traducción ----------
3,4d1
< Atributo: 
< 	Traducción: int main_k,main_nprimos,main_n,main_divisor;
6,7c3,4
< 	Heredado: 
< 	Tipo: 
---
> 
> int main_k,main_nprimos,main_n,main_divisor;
10,13c7,10
< _k =i 100  padd;
< _nprimos =i 0  padd;
< _n =i 1  padd;
< while ( nprimos <i k )
---
> main_k =i 100;
> main_nprimos =i 0;
> main_n =i 1;
> while ( main_nprimos <i main_k)
15,20c12,17
< _esprimo =i 1  padd;
< _seguirenbucle =i 1  padd;
< _divisor =i n/i 2  padd;
< while ( seguirenbucle ==i 1  )
< if(divisor <=i 1  )
< _seguirenbucle =i 0  gato;
---
> main_esprimo =i 1;
> main_seguirenbucle =i 1;
> main_divisor =i main_n /i 2;
> while ( main_seguirenbucle ==i 1)
> if (main_divisor <=i 1)
> main_seguirenbucle =i 0;
23,24c20,21
< if(divisor*i (n/i divisor ) !=i n )
< _divisor =i divisor -i 1 gato;
---
> if (main_divisor *i (main_n /i main_divisor) !=i main_n)
> main_divisor =i main_divisor -i 1;
26,27c23,25
< _esprimo =i 0  delta;if(esprimo ==i 0  )
< _seguirenbucle =i 0  ;
---
> main_esprimo =i 0;
> if (main_esprimo ==i 0)
> main_seguirenbucle =i 0;
29c27,28
< delta;if(esprimo ==i 1  )
---
> 
> if (main_esprimo ==i 1)
31,32c30,31
< printf("%d\n",n )padd;
< _nprimos =i nprimos +i 1 ;
---
> printf("%d\n",main_n);
> main_nprimos =i main_nprimos +i 1;
34,35c33,34
< padd;
< _n =i n +i 1 ;
---
> 
> main_n =i main_n +i 1;
--------------------------
Prueba: prog-correcto2
--- Fallo en la traducción ----------
3,4d1
< intAtributo: 
< 	Traducción: int rojo_a,rojo_b,rojo_c;
6,7c3
< 	Heredado: 
< 	Tipo: 
---
> int rojo_a,rojo_b,rojo_c;
9,10c5,6
< rojo_a =i 7  padd;
< rojo_b =i rojoa +i 3 ;
---
> rojo_a =i 7;
> rojo_b =i rojo_a +i 3;
12,25c8,13
< doubleintAtributo: 
< 	Traducción: double verde_fosfo_j;
< 
< 	Heredado: 
< 	Tipo: 
< doubleAtributo: 
< 	Traducción: int verde_fosfo_rito_k;
< 
< 	Heredado: 
< 	Tipo: 
< double verde_fosforito() {
< verde_fosfo_rito_k =i 643  padd;
< verde_fosfo_rito_j =r itor(verde_fosfo_ritok)/r itor(10 ) padd;
< verde_fosfo_rito_j =r itor(verde_fosfo_ritok/i 10  ;
---
> double verde_fosfo_j;
> int verde_fosfo_rito_k;
> double verde_fosfo_rito() {
> verde_fosfo_rito_k =i 643;
> verde_fosfo_j =r itor(verde_fosfo_rito_k) /r itor(10);
> verde_fosfo_j =r itor(verde_fosfo_rito_k /i 10);
27c15
< int verdefosfo() {
---
> int verde_fosfo() {
30,34c18
< Atributo: 
< 	Traducción: double verde_m,verde_n;
< 
< 	Heredado: 
< 	Tipo: 
---
> double verde_m,verde_n;
37,39c21,23
< verde_o =i (27  -i 20 )*i 3  padd;
< verde_m =r itor(verdeo padd;
< while ( verdeo >i 10  )
---
> verde_o =i (27 -i 20) *i 3;
> verde_m =r itor(verde_o);
> while ( verde_o >i 10)
41,42c25,26
< if(2 *i verdeo ==i 22  )
< verde_p =i 1  gato;
---
> if (2 *i verde_o ==i 22)
> verde_p =i 1;
44,45c28,29
< verde_p =i 0  delta;padd;
< verde_o =i verdeo -i 1 ;
---
> verde_p =i 0;
> verde_o =i verde_o -i 1;
49,50d32
< Atributo: 
< 	Traducción: int main_a,main_b,main_c;
52,53c34
< 	Heredado: 
< 	Tipo: 
---
> int main_a,main_b,main_c;
55,56c36,37
< _a =i 77  padd;
< printf("%d\n",a +i 3 );
---
> main_a =i 77;
> printf("%d\n",main_a +i 3);
--------------------------
Prueba: prog-correcto
--- Fallo en la traducción ----------
0a1,33
> // program programa
> 
> int f_a,f_b;
> double f_g_f,f_g_g,f_g_k,f_g_l;
> int f_g() {
> f_g_f =r itor(1 +i 2 +i 3 +i 4 +i 5 -i 6 +i 7 -i 8) +r 3.0;
> f_a =i 1 +i 2 +i 3 +i 4 +i 5 +i 6 +i 7 -i 8 +i 9;
> if (f_g_f <r itor(f_a))
> printf("%g\n",itor(f_a) -r f_g_f);
> else
> printf("%g\n",f_g_f -r itor(f_a));
> }
> int f_k,f_l;
> double f_m,f_n;
> double f() {
> f_b =i 7 *i 3 /i 2;
> f_m =r itor(f_a) /r itor(f_b);
> }
> 
> int main_i,main_j;
> int main() {
> main_i =i 1;
> main_j =i 10;
> while ( itor(main_i) <r itor(main_j) *r 1.0)
> {
> printf("%d\n",main_i);
> printf("%d\n",main_j);
> main_i =i main_i +i 1;
> main_j =i main_j -i 1;
> }
> 
> }
> 
--------------------------

OJO: FALLAN 4 PRUEBAS DEL AUTOCORRECTOR



AVISO IMPORTANTE: este autocorrector NO prueba todos los casos posibles

